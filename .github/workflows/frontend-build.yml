name: Frontend - Build & Push

on:
  push:
    branches: ["main"] # publica latest cuando haces push/merge a main
    tags: ["v*.*.*"] # publica versiones cuando haces push de un tag semver
    paths:
      - "frontend/**" # solo corre si cambian archivos del frontend
      - ".github/workflows/frontend-build.yml"
  pull_request:
    paths:
      - "frontend/**" # valida en PR que toca frontend
      - ".github/workflows/frontend-build.yml"
  workflow_dispatch: {} # bot√≥n "Run workflow" en Actions

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-frontend

concurrency:
  group: frontend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Descomenta este bloque si tu build con CRA falla por warnings (CI=true):
      - name: Build sanity (CRA)
        working-directory: frontend
        run: |
          npm ci
          npm run build
        env:
          CI: "" # evita que CRA trate warnings como errores

      - name: Docker meta (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
